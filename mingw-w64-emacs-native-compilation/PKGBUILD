# Maintainer: Wolfgang Ramos <wolfgang@ramos.arhuis.de>
# Maintainer: Haroogan <Haroogan@gmail.com>
# Maintainer: Oscar Fuentes <ofv@wanadoo.es>

_realname=emacs
pkgbase="mingw-w64-${_realname}-native-compilation"
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}-native-compilation"
pkgver=28.0.90
pkgrel=1
pkgdesc="GNU Emacs native-compilation branch (mingw-w64)"
url="https://www.gnu.org/software/${_realname}/"
license=('GPL3')
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64')
depends=("${MINGW_PACKAGE_PREFIX}-universal-ctags-git"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-xpm-nox"
         "${MINGW_PACKAGE_PREFIX}-harfbuzz"
         "${MINGW_PACKAGE_PREFIX}-jansson"
         "${MINGW_PACKAGE_PREFIX}-gnutls"
         "${MINGW_PACKAGE_PREFIX}-libwinpthread"
		 "${MINGW_PACKAGE_PREFIX}-gnupg"
		 "${MINGW_PACKAGE_PREFIX}-pinentry"
         "${MINGW_PACKAGE_PREFIX}-libgccjit")
optdepends=("${MINGW_PACKAGE_PREFIX}-giflib"
            "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
            "${MINGW_PACKAGE_PREFIX}-diffutils" # used by magit for diffing
            "${MINGW_PACKAGE_PREFIX}-libpng"
            "${MINGW_PACKAGE_PREFIX}-librsvg"
            "${MINGW_PACKAGE_PREFIX}-libtiff"
	    # ImageMagick is considered unsafe and unstable. See
	    # INSTALL file on Emacs top source directory. If
	    # ImageMagick support is restored, check if the patch in
	    # image.c.diff is still necessary:
            # "${MINGW_PACKAGE_PREFIX}-imagemagick"
            "${MINGW_PACKAGE_PREFIX}-libxml2")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "make"
             "autoconf"
             "texinfo"
             "patch"
             "git"
             "${optdepends[@]}")
conflicts=("${MINGW_PACKAGE_PREFIX}-emacs")
# Don't zip info files because the built-in info reader uses gzip to
# decompress them. gzip is not available as a mingw binary.
options=('strip' '!zipman')
source=("emacs-git::git://git.savannah.gnu.org/emacs.git#branch=emacs-28")
# If Savannah access is blocked for reasons, you can use Github instead.
#source=("emacs-git::git://github.com/emacs-mirror/emacs.git#branch=master")
sha256sums=('SKIP')

prepare() {
  cd "emacs-git"
  ./autogen.sh
}

build() {
  [[ -d "${srcdir}/build-${MINGW_CHOST}" ]] && rm -rf "${srcdir}/build-${MINGW_CHOST}"
  mkdir -p "${srcdir}/build-${MINGW_CHOST}"
  cd "build-${MINGW_CHOST}"

  ../emacs-git/configure \
    --prefix="${MINGW_PREFIX}" \
    --build="${MINGW_CHOST}" \
    --with-modules \
    --without-dbus \
    --with-native-compilation \
    --without-compress-install

  # --without-compress-install is needed because we don't have gzip in
  # the mingw binaries.

  # --without-pop is used to prevent emacs from installing a an auxiliary
  # limited and insecure substitute 'movemail' program. This we be unnessecary
  # when GNU mailutils become available for MINGW64 and MINGW32. Then 
  # mailutils should be included in the depends list.

  make --jobs=1
  
  # Limiting the number of jobs to one fixed strange issues with GitHub CI 
  # (aka workflows). When using an unlimited number of jobs GitHub CI
  # stopped without detectable reason at a random point somewhere in the 
  # second half of the build step.
}

package() {
  cd "build-${MINGW_CHOST}"
  make DESTDIR="${pkgdir}" install
  rm -f "${pkgdir}${MINGW_PREFIX}/bin/ctags.exe"
  rm -f "${pkgdir}${MINGW_PREFIX}/share/man/man1/ctags.1.gz"

  local dir="${pkgdir}${MINGW_PREFIX}/share/${_realname}"
        dir="${dir}/$(ls -1 ${dir} | grep -E '([0-9]+\.[0-9]+)(\.[0-9]+)?')/src"

  mkdir -p "${dir}"
  cd "${srcdir}/emacs-git/src"
  cp *.c *.h *.m "${dir}"
}

# TODO:
# Patch `shell-file-name' default in the C source code similarly to
# `source-directory'.
